I"©<p>Iâ€™ve always wanted to keep an active blog, but despite having this aspiration for many years and revisiting it over and over, Iâ€™ve realized that my ideal way of sharing information might take a different form. For the next few weeks I am experimenting with a <a href="/garden">digital garden</a>, focusing on curating pages and resources rather than writing discretized updates. Follow along there if youâ€™d like to see what Iâ€™m up to. It took a little while longer to setup than I would have liked, so Iâ€™m sharing how I set it up to save others a headache.</p>

<h2 id="setting-up-the-digital-garden">Setting up the digital garden</h2>

<p>I started by checking out a <a href="https://nesslabs.com/digital-garden-set-up">guide</a> on setting up a digital garden on Ness Labs. Since I already have Jekyll and Github pages working together on this website, I decided to narrow my options to either this <a href="https://digital-garden-jekyll-template.netlify.app/">digital garden theme</a> or <a href="https://simply-jekyll.netlify.app/posts/introduction-to-simply-jekyll">Simply Jekyll</a>. I thought the former was prettier so I decided to go with that.</p>

<h2 id="digital-garden-template">Digital Garden Template</h2>

<p>In order to set up the template, I needed to install Jekyll as I got a new computer. For some reason I was having a hard time getting the Ruby dev environment set up correctly. Eventually I found that people across the internet were having similar issues, and installing Ruby using <a href="https://github.com/orta/cocoapods-keys/issues/198#issuecomment-510909030">rbenv</a> fixed it for me.</p>

<p>Once Ruby was ready, I could bundle the Jekyll template following the instructions <a href="https://maximevaillancourt.com/blog/setting-up-your-own-digital-garden-with-jekyll">here</a>. Instead of deploying to Netlify, I wanted to use Github pages. However, I quickly ran into issues with Github pages not building. I commented out the graph feature in the template to get Github pages to build, but then realized that custom plugins (required for bi-directional linking in the digital garden) arenâ€™t allowed to run on Github pages. Instead, I created a second Github repository that just stored the <code class="language-plaintext highlighter-rouge">_site</code> folder from the digital garden (i.e. all the HTML files), and then committed <a href="https://github.com/maggiedelano/garden">that</a>.</p>

<h2 id="editing-markdown">Editing Markdown</h2>

<p>Part of this project was motivated by my desire to try out <a href="https://obsidian.md/">Obsidian</a> to see how it might complement my use of <a href="https://roamresearch.com/">Roam Research</a>. To use Obsidian with the digital garden, open the <code class="language-plaintext highlighter-rouge">_notes</code> folder as a new vault. The digital garden supports page links using double brackets [[]] which is very convenient. There are some markdown files in the default template outside the <code class="language-plaintext highlighter-rouge">_notes</code> folder, which you can also open in Obsidian or another text editor. If you have any issues, it could be with page titles. Check out <a href="https://refinedmind.co/obsidian-jekyll-workflow">this post</a> for ideas.</p>

<h2 id="faster-deployment">Faster Deployment</h2>

<p>One of the reasons I havenâ€™t been great about keeping this website and blog up to date is that I find even the friction of writing the files, building the site to verify them, and then committing the code to be a lot of overhead. If itâ€™s been a while, I even forget how to build the site and have to look it up again. To address this I wrote some <a href="https://www.keyboardmaestro.com/main/">keyboard maestro</a> macro that expands to <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>. I also wrote a shell script that automatically commits and pushes the site to Github. This dramatically decreases the overhead, so I hope to spend more time <a href="/garden">tending</a>.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/zsh</span>

git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="nv">$1</span>
git push

</code></pre></div></div>

<p>To use the script, put this in a file with a <code class="language-plaintext highlighter-rouge">.sh</code> file extension. Use <code class="language-plaintext highlighter-rouge">chmod 755 &lt;yourfile&gt;.sh</code> to make it executable. Then type <code class="language-plaintext highlighter-rouge">./&lt;yourfile&gt;.sh "your commit message"</code> to commit. You will probably need to enter your credentials once but can then store it for the future.</p>
:ET